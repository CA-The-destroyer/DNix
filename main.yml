---
# roles/arc_onboard/tasks/main.yml

# --- Sanity & pre-status ------------------------------------------------------

- name: Arc | Check azcmagent binary exists
  stat:
    path: /opt/azcmagent/bin/azcmagent
  register: azcmagent_bin

- name: Arc | Fail if azcmagent missing
  fail:
    msg: "azcmagent not found at /opt/azcmagent/bin/azcmagent. Install the Azure Arc agent first."
  when: not azcmagent_bin.stat.exists

- name: Arc | Show version
  command: /opt/azcmagent/bin/azcmagent version
  register: arc_version
  changed_when: false
  become: true

- name: Arc | Current status (pre)
  command: /opt/azcmagent/bin/azcmagent show
  register: arc_status_pre
  changed_when: false
  failed_when: false
  become: true

- name: Arc | Determine if already connected
  set_fact:
    arc_connected: >-
      {{
        (arc_status_pre.stdout is search('Connected\\s*:\\s*yes', ignorecase=True)) or
        (arc_status_pre.stdout is search('\"status\"\\s*:\\s*\"Connected\"', ignorecase=True))
      }}

# Optional: force a clean rebind when arc_force_reconnect: true
- name: Arc | Disconnect first (forced)
  command: /opt/azcmagent/bin/azcmagent disconnect --force
  register: arc_disc
  changed_when: arc_disc.rc == 0
  failed_when: false
  become: true
  when: arc_force_reconnect | default(false) | bool

# --- Resource name (facts-driven; no external DNS trust) ---------------------

# Prefer short hostname from facts; then FQDN; last resort = inventory IP
- name: Arc | Pick base name from facts
  set_fact:
    _raw_name: >-
      {%- if ansible_hostname is defined and ansible_hostname and ansible_hostname != 'localhost' -%}
      {{ ansible_hostname }}
      {%- elif ansible_fqdn is defined and ansible_fqdn and ansible_fqdn != 'localhost' -%}
      {{ ansible_fqdn }}
      {%- else -%}
      {{ inventory_hostname }}
      {%- endif -%}

# Normalize to an Azure-legal resource name
# (lowercase, dots->dashes, only [a-z0-9-], collapse repeats, trim ends)
- name: Arc | Normalize to legal Azure resource name
  set_fact:
    arc_name: >-
      {{ (_raw_name | lower)
         | replace('.', '-')
         | regex_replace('[^a-z0-9-]', '-')
         | regex_replace('-{2,}', '-')
         | regex_replace('(^-|-$)', '')
      }}

- name: Arc | Using resource name
  debug:
    msg: "Arc resource name = {{ arc_name }}"

# --- Tags: normalize input (optional) then merge audit info -------------------

# Accept arc_tags as dict OR list of "k=v"; otherwise empty
- name: Arc | Normalize incoming tags to a mapping
  set_fact:
    _arc_tags_base: >-
      {% if arc_tags is mapping -%}
      {{ arc_tags }}
      {%- elif arc_tags is iterable and (arc_tags is not string) -%}
      {{ dict( (arc_tags | map('split','=', 1) | list) ) }}
      {%- else -%}
      {}
      {%- endif %}

- name: Arc | Effective tags (merge normalized + audit)
  set_fact:
    arc_tags_effective: >-
      {{ _arc_tags_base | combine({
          'ansible_hostname': (ansible_hostname | default('n/a', true)),
          'ansible_fqdn':     (ansible_fqdn     | default('n/a', true)),
          'original_ip':      inventory_hostname
      }) }}

# --- Connect (skip if already connected unless forced) -----------------------

- name: Arc | Connect to Azure Arc
  command: >-
    /opt/azcmagent/bin/azcmagent connect
    --service-principal-id "{{ arc_sp_app_id }}"
    --service-principal-secret "{{ defender_sp_secret }}"
    --tenant-id "{{ arc_tenant_id }}"
    --subscription-id "{{ arc_subscription_id }}"
    --resource-group "{{ arc_resource_group }}"
    --location "{{ arc_location }}"
    --resource-name "{{ arc_name }}"
    {% if arc_tags_effective %}--tags "{{ arc_tags_effective | dict2items | map('join','=') | join(' ') }}"{% endif %}
  register: arc_connect
  changed_when: arc_connect.rc == 0
  no_log: true
  become: true
  when: not arc_connected or (arc_force_reconnect | default(false) | bool)

# --- Verify (eventual consistency tolerant) -----------------------------------

- name: Arc | Verify connection (JSON)
  command: /opt/azcmagent/bin/azcmagent show --json
  register: arc_verify_json
  changed_when: false
  failed_when: false
  become: true
  until: >
    (arc_verify_json.stdout is search('\"Connected\"\\s*:\\s*true', ignorecase=True)) or
    (arc_verify_json.stdout is search('\"status\"\\s*:\\s*\"Connected\"', ignorecase=True)) or
    (arc_verify_json.stdout is search('Connected\\s*:\\s*yes', ignorecase=True))
  retries: "{{ (arc_verify_retries | default(10)) | int }}"
  delay: "{{ (arc_verify_delay | default(6)) | int }}"

# --- Diagnostics on failure (no secrets) --------------------------------------

- name: Arc | Status (text) after connect
  command: /opt/azcmagent/bin/azcmagent show
  register: arc_status_post
  changed_when: false
  become: true
  when: arc_verify_json is failed

- name: Arc | Tail agent logs (last 120 lines)
  shell: |
    set -euo pipefail
    for f in /var/opt/azcmagent/log/azcmagent.log /var/opt/azcmagent/log/himds.log; do
      echo "----- $f (tail -n 120) -----"
      test -f "$f" && tail -n 120 "$f" || echo "missing: $f"
    done
  register: arc_logs_tail
  changed_when: false
  become: true
  when: arc_verify_json is failed

- name: Arc | Diagnostic summary
  debug:
    msg:
      - "azcmagent version: {{ (arc_version.stdout | default('unknown')) | trim }}"
      - "Final status (text): {{ (arc_status_post.stdout | default('n/a')) | trim }}"
      - "Resource name used: {{ arc_name }}"
      - "Tags effective: {{ arc_tags_effective | default({}) }}"
      - "Logs tail:\n{{ (arc_logs_tail.stdout | default('n/a')) }}"
  when: arc_verify_json is failed
